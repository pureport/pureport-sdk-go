/*
 * Pureport Control Plane
 *
 * Pureport API
 *
 * API version: 1.0.0
 * Contact: support@pureport.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package client

import (
	_context "context"
	"fmt"
	"github.com/antihax/optional"
	_ioutil "io/ioutil"
	_nethttp "net/http"
	_neturl "net/url"
	"reflect"
	"strings"
)

// Linger please
var (
	_ _context.Context
)

// AuditApiService AuditApi service
type AuditApiService service

// FindAuditLogsOpts Optional parameters for the method 'FindAuditLogs'
type FindAuditLogsOpts struct {
	PageNumber           optional.Int32
	PageSize             optional.Int32
	Sort                 optional.String
	SortDirection        optional.String
	StartTime            optional.Time
	EndTime              optional.Time
	IncludeChildAccounts optional.Bool
	IncludeChildSubjects optional.Bool
	EventTypes           optional.Interface
	Result               optional.String
	PrincipalId          optional.String
	IpAddress            optional.String
	CorrelationId        optional.String
	SubjectId            optional.String
	SubjectType          optional.String
}

/*
FindAuditLogs Method for FindAuditLogs
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param accountId
 * @param optional nil or *FindAuditLogsOpts - Optional Parameters:
 * @param "PageNumber" (optional.Int32) -
 * @param "PageSize" (optional.Int32) -
 * @param "Sort" (optional.String) -
 * @param "SortDirection" (optional.String) -
 * @param "StartTime" (optional.Time) -
 * @param "EndTime" (optional.Time) -
 * @param "IncludeChildAccounts" (optional.Bool) -
 * @param "IncludeChildSubjects" (optional.Bool) -  include child object records if specified subject is of type NETWORK or CONNECTION
 * @param "EventTypes" (optional.Interface of []string) -
 * @param "Result" (optional.String) -
 * @param "PrincipalId" (optional.String) -
 * @param "IpAddress" (optional.String) -
 * @param "CorrelationId" (optional.String) -
 * @param "SubjectId" (optional.String) -
 * @param "SubjectType" (optional.String) -
@return PageAuditEntry
*/
func (a *AuditApiService) FindAuditLogs(ctx _context.Context, accountId string, localVarOptionals *FindAuditLogsOpts) (PageAuditEntry, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  PageAuditEntry
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/accounts/{accountId}/auditLog"
	localVarPath = strings.Replace(localVarPath, "{"+"accountId"+"}", _neturl.QueryEscape(fmt.Sprintf("%v", accountId)), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if localVarOptionals != nil && localVarOptionals.PageNumber.IsSet() {
		localVarQueryParams.Add("pageNumber", parameterToString(localVarOptionals.PageNumber.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.PageSize.IsSet() {
		localVarQueryParams.Add("pageSize", parameterToString(localVarOptionals.PageSize.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Sort.IsSet() {
		localVarQueryParams.Add("sort", parameterToString(localVarOptionals.Sort.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.SortDirection.IsSet() {
		localVarQueryParams.Add("sortDirection", parameterToString(localVarOptionals.SortDirection.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.StartTime.IsSet() {
		localVarQueryParams.Add("startTime", parameterToString(localVarOptionals.StartTime.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.EndTime.IsSet() {
		localVarQueryParams.Add("endTime", parameterToString(localVarOptionals.EndTime.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.IncludeChildAccounts.IsSet() {
		localVarQueryParams.Add("includeChildAccounts", parameterToString(localVarOptionals.IncludeChildAccounts.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.IncludeChildSubjects.IsSet() {
		localVarQueryParams.Add("includeChildSubjects", parameterToString(localVarOptionals.IncludeChildSubjects.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.EventTypes.IsSet() {
		t := localVarOptionals.EventTypes.Value()
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("eventTypes", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("eventTypes", parameterToString(t, "multi"))
		}
	}
	if localVarOptionals != nil && localVarOptionals.Result.IsSet() {
		localVarQueryParams.Add("result", parameterToString(localVarOptionals.Result.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.PrincipalId.IsSet() {
		localVarQueryParams.Add("principalId", parameterToString(localVarOptionals.PrincipalId.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.IpAddress.IsSet() {
		localVarQueryParams.Add("ipAddress", parameterToString(localVarOptionals.IpAddress.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.CorrelationId.IsSet() {
		localVarQueryParams.Add("correlationId", parameterToString(localVarOptionals.CorrelationId.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.SubjectId.IsSet() {
		localVarQueryParams.Add("subjectId", parameterToString(localVarOptionals.SubjectId.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.SubjectType.IsSet() {
		localVarQueryParams.Add("subjectType", parameterToString(localVarOptionals.SubjectType.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v PageAuditEntry
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
