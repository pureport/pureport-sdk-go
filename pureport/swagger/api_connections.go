/*
 * Pureport Control Plane
 *
 * Pureport API
 *
 * API version: 1.0.0
 * Generated by: Swagger Codegen (https://github.com/swagger-api/swagger-codegen.git)
 */

package swagger

import (
	"context"
	"fmt"
	"github.com/antihax/optional"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"
)

// Linger please
var (
	_ context.Context
)

type ConnectionsApiService service

/*
ConnectionsApiService Add new connection

 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param networkId
 * @param optional nil or *AddConnectionOpts - Optional Parameters:
     * @param "Body" (optional.Interface of Connection) -


*/

/**
 * Duplicate
 */
// type AddConnectionOpts struct {
// 	Body optional.Interface
// }

func (a *ConnectionsApiService) AddConnection(ctx context.Context, networkId string, localVarOptionals *AddConnectionOpts) (*http.Response, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Post")
		localVarPostBody   interface{}
		localVarFileName   string
		localVarFileBytes  []byte
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/networks/{networkId}/connections"
	localVarPath = strings.Replace(localVarPath, "{"+"networkId"+"}", fmt.Sprintf("%v", networkId), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	// body params
	if localVarOptionals != nil && localVarOptionals.Body.IsSet() {

		// ##################################################
		// Pureport HACKAGE!!!
		// ##################################################
		// Decode as a Base Connection first to get the type
		switch body := localVarOptionals.Body.Value().(type) {
		case AwsDirectConnectConnection:
			localVarPostBody = body

		case AzureExpressRouteConnection:
			localVarPostBody = body

		case GoogleCloudInterconnectConnection:
			localVarPostBody = body

		case DummyConnection:
			localVarPostBody = body

		case SiteIpSecVpnConnection:
			localVarPostBody = body

		default:
			return nil, reportError("body should be valid Connection")
		}
		// ##################################################
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {

		// If we succeed, return the data, otherwise pass on to decode error.
		var v Connection
		err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
		if err != nil {
			return localVarHttpResponse, err
		}

		return localVarHttpResponse, nil
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body:  localVarBody,
			error: localVarHttpResponse.Status,
		}

		return localVarHttpResponse, newErr
	}

	return localVarHttpResponse, nil
}

/*
ConnectionsApiService Delete connection

 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param connectionId

@return Connection
*/
func (a *ConnectionsApiService) DeleteConnection(ctx context.Context, connectionId string) (interface{}, *http.Response, error) {
	var (
		localVarHttpMethod  = strings.ToUpper("Delete")
		localVarPostBody    interface{}
		localVarFileName    string
		localVarFileBytes   []byte
		localVarReturnValue interface{}
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/connections/{connectionId}"
	localVarPath = strings.Replace(localVarPath, "{"+"connectionId"+"}", fmt.Sprintf("%v", connectionId), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {

		// ##################################################
		// Pureport HACKAGE!!!
		// ##################################################
		// Decode as a Base Connection first to get the type
		var base Connection
		err = a.client.decode(&base, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
		if err != nil {
			return localVarReturnValue, localVarHttpResponse, err
		}
		// Check the Connection type and decode as sub type
		switch base.Type_ {
		case "AWS_DIRECT_CONNECT":

			var c = AwsDirectConnectConnection{}
			err = a.client.decode(&c, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			localVarReturnValue = c

		case "AZURE_EXPRESS_ROUTE":
			var c = AzureExpressRouteConnection{}
			err = a.client.decode(&c, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			localVarReturnValue = c

		case "GOOGLE_CLOUD_INTERCONNECT":
			var c = GoogleCloudInterconnectConnection{}
			err = a.client.decode(&c, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			localVarReturnValue = c

		case "SITE_IPSEC_VPN":
			var c = SiteIpSecVpnConnection{}
			err = a.client.decode(&c, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			localVarReturnValue = c

		default:
			var c = DummyConnection{}
			err = a.client.decode(&c, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			localVarReturnValue = c
		}

		// ##################################################
		// End Pureport HACKAGE!!!
		// ##################################################

		// If we succeed, return the data, otherwise pass on to decode error.
		if err == nil {
			return localVarReturnValue, localVarHttpResponse, err
		}
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body:  localVarBody,
			error: localVarHttpResponse.Status,
		}

		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/*
ConnectionsApiService List connections across all networks for the account

 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param accountId

@return []Connection
*/
func (a *ConnectionsApiService) FindConnections(ctx context.Context, accountId string) ([]Connection, *http.Response, error) {
	var (
		localVarHttpMethod  = strings.ToUpper("Get")
		localVarPostBody    interface{}
		localVarFileName    string
		localVarFileBytes   []byte
		localVarReturnValue []Connection
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/accounts/{accountId}/connections"
	localVarPath = strings.Replace(localVarPath, "{"+"accountId"+"}", fmt.Sprintf("%v", accountId), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
		if err == nil {
			return localVarReturnValue, localVarHttpResponse, err
		}
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body:  localVarBody,
			error: localVarHttpResponse.Status,
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/*
ConnectionsApiService Get connection details

 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param connectionId

@return Connection
*/
func (a *ConnectionsApiService) GetConnection(ctx context.Context, connectionId string) (interface{}, *http.Response, error) {
	var (
		localVarHttpMethod  = strings.ToUpper("Get")
		localVarPostBody    interface{}
		localVarFileName    string
		localVarFileBytes   []byte
		localVarReturnValue interface{}
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/connections/{connectionId}"
	localVarPath = strings.Replace(localVarPath, "{"+"connectionId"+"}", fmt.Sprintf("%v", connectionId), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {

		// ##################################################
		// Pureport HACKAGE!!!
		// ##################################################
		// Decode as a Base Connection first to get the type
		var base Connection
		err = a.client.decode(&base, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
		if err != nil {
			return localVarReturnValue, localVarHttpResponse, err
		}

		// Check the Connection type and decode as sub type
		switch base.Type_ {
		case "AWS_DIRECT_CONNECT":

			var c = AwsDirectConnectConnection{}
			err = a.client.decode(&c, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			localVarReturnValue = c

		case "AZURE_EXPRESS_ROUTE":
			var c = AzureExpressRouteConnection{}
			err = a.client.decode(&c, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			localVarReturnValue = c

		case "GOOGLE_CLOUD_INTERCONNECT":
			var c = GoogleCloudInterconnectConnection{}
			err = a.client.decode(&c, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			localVarReturnValue = c

		case "SITE_IPSEC_VPN":
			var c = SiteIpSecVpnConnection{}
			err = a.client.decode(&c, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			localVarReturnValue = c

		default:
			var c = DummyConnection{}
			err = a.client.decode(&c, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			localVarReturnValue = c
		}
		// ##################################################
		// End Pureport HACKAGE!!!
		// ##################################################

		// If we succeed, return the data, otherwise pass on to decode error.
		if err == nil {
			return localVarReturnValue, localVarHttpResponse, err
		}
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body:  localVarBody,
			error: localVarHttpResponse.Status,
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/*
ConnectionsApiService List network connections

 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param networkId

@return []Connection
*/
func (a *ConnectionsApiService) GetConnections(ctx context.Context, networkId string) ([]Connection, *http.Response, error) {
	var (
		localVarHttpMethod  = strings.ToUpper("Get")
		localVarPostBody    interface{}
		localVarFileName    string
		localVarFileBytes   []byte
		localVarReturnValue []Connection
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/networks/{networkId}/connections"
	localVarPath = strings.Replace(localVarPath, "{"+"networkId"+"}", fmt.Sprintf("%v", networkId), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
		if err == nil {
			return localVarReturnValue, localVarHttpResponse, err
		}
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body:  localVarBody,
			error: localVarHttpResponse.Status,
		}

		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/*
ConnectionsApiService Update connection

 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param connectionId
 * @param optional nil or *UpdateConnectionOpts - Optional Parameters:
     * @param "Body" (optional.Interface of Connection) -

@return Connection
*/

type UpdateConnectionOpts struct {
	Body optional.Interface
}

func (a *ConnectionsApiService) UpdateConnection(ctx context.Context, connectionId string, localVarOptionals *UpdateConnectionOpts) (interface{}, *http.Response, error) {
	var (
		localVarHttpMethod  = strings.ToUpper("Put")
		localVarPostBody    interface{}
		localVarFileName    string
		localVarFileBytes   []byte
		localVarReturnValue interface{}
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/connections/{connectionId}"
	localVarPath = strings.Replace(localVarPath, "{"+"connectionId"+"}", fmt.Sprintf("%v", connectionId), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	// body params
	if localVarOptionals != nil && localVarOptionals.Body.IsSet() {

		localVarOptionalBody, localVarOptionalBodyok := localVarOptionals.Body.Value().(Connection)
		if !localVarOptionalBodyok {
			return localVarReturnValue, nil, reportError("body should be Connection")
		}
		localVarPostBody = &localVarOptionalBody
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {

		// ##################################################
		// Pureport HACKAGE!!!
		// ##################################################
		// Decode as a Base Connection first to get the type
		var base Connection
		err = a.client.decode(&base, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
		if err != nil {
			return localVarReturnValue, localVarHttpResponse, err
		}
		// Check the Connection type and decode as sub type
		switch base.Type_ {
		case "AWS_DIRECT_CONNECT":

			var c = AwsDirectConnectConnection{}
			err = a.client.decode(&c, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			localVarReturnValue = c

		case "AZURE_EXPRESS_ROUTE":
			var c = AzureExpressRouteConnection{}
			err = a.client.decode(&c, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			localVarReturnValue = c

		case "GOOGLE_CLOUD_INTERCONNECT":
			var c = GoogleCloudInterconnectConnection{}
			err = a.client.decode(&c, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			localVarReturnValue = c

		case "SITE_IPSEC_VPN":
			var c = SiteIpSecVpnConnection{}
			err = a.client.decode(&c, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			localVarReturnValue = c

		default:
			var c = DummyConnection{}
			err = a.client.decode(&c, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			localVarReturnValue = c
		}

		// ##################################################
		// End Pureport HACKAGE!!!
		// ##################################################

		// If we succeed, return the data, otherwise pass on to decode error.
		if err == nil {
			return localVarReturnValue, localVarHttpResponse, err
		}
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body:  localVarBody,
			error: localVarHttpResponse.Status,
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}
